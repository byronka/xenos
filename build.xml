<project name="Xenos" default="usage" >


  <!-- Note: it is important that this file, build.xml, remain
       at the top of the directory, as it refers to directories
       in relationship to its location -->

  <!-- ################ -->
  <!--    PROPERTIES    -->
  <!-- ################ -->
  <!-- assign values to be used elsewhere in this script -->
  <!--====================================================-->

	<!-- Tomcat -->
  <property name="tomcat.home.bin" 
		value="./web_container/apache-tomcat-8.0.14/bin/" />
  <property name="tomcat.webapps.dir" 
		value="./web_container/apache-tomcat-8.0.14/webapps/" />
  <property name="tomcat.lib.dir" 
		value="./web_container/apache-tomcat-8.0.14/lib/" />

	<!-- Source directory -->
  <property name="src.dir" 
		value="./src" />

	<!-- Javadocs -->
  <property name="docs.dir" 
		value="${tomcat.webapps.dir}/xenos_javadocs" />
  <property name="lint.output.dir" 
		value="${tomcat.webapps.dir}/lint" />

	<!-- Connection strings -->
	<property name="conn.str.with.db"
		value="CONNECTION_STRING_WITH_DB=jdbc:mysql://localhost/xenos_database?user=xenosuser&amp;password=password1&amp;useUnicode=yes&amp;characterEncoding=UTF-8" />
	<property name="conn.str.without.db"
		value="CONNECTION_STRING_WITHOUT_DB=jdbc:mysql://localhost/?user=xenosuser&amp;password=password1&amp;useUnicode=yes&amp;characterEncoding=UTF-8" />

	<!-- static code analysis -->
	<property name="lint4j.dist.dir"
		value="./utils/lint4j-0.9.1" />
	<property name="findbugs.dist.dir"
		value="./utils/findbugs-3.0.0" />
	<property name="pmd.dist.dir"
		value="./utils/pmd-bin-5.2.2" />
	<property name="checkstyle.dist.dir"
		value="./utils/checkstyle" />

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>
	


  <!-- ##################### -->
  <!--    COMBINED TARGETS   -->
  <!-- ##################### -->
  <!-- Targets that combine other targets for ease of use -->
  <!--====================================================-->

  <!-- This target is expected to be run when a new dev first
      gets started.  It sets up a new database, adds some sample
      data to it, then cleans and builds the classes, puts everything
      in its place, and kicks off the server.
  -->
  <target name="run-dev" depends="compile-schema-code"
    description="full-cleans (bye-byte data!), makes a new database with sample data, compiles, starts server">
    <antcall target="compile" />
    <antcall target="clean-schema" />
    <antcall target="build-schema" />
    <antcall target="build-sample-data" />
    <antcall target="build-procs" />
    <antcall target="build-events" />
		<antcall target="build-language-data" />
    <antcall target="tomcat-restart" />
  </target>

  <target name="run" depends="compile-schema-code"
    description="full-cleans (bye-byte data!), builds a new database, compiles, starts server">
    <antcall target="compile" />
    <antcall target="clean-schema" />
    <antcall target="build-schema" />
    <antcall target="build-procs" />
    <antcall target="build-events" />
		<antcall target="build-language-data" />
  </target>

  <target name="clean-everything" depends="compile-schema-code"
    description="cleans everything possible">
    <antcall target="clean-schema" />
    <antcall target="clean-build" />
    <antcall target="clean-code-analysis" />
    <antcall target="clean-tomcat" />
    <antcall target="clean-javadoc" />
    <antcall target="clean-schema-code" />
  </target>


  <!-- ################ -->
  <!--    CLEANING      -->
  <!-- ################ -->
  <!-- targets that deleted generated files and directories -->
  <!--======================================================-->

  <!-- deletes the javadoc directory --> 
  <target 
    name="clean-javadoc" 
    description="deletes the javadoc directory">
		<delete dir="${docs.dir}"/>
  </target>

  <!-- deletes the tomcat log and work directory 
    don't worry, they get rebuilt when Tomcat starts. --> 
  <target 
    name="clean-tomcat" 
    description="deletes the tomcat log and work directory">
		<delete>
			<fileset dir="web_container/apache-tomcat-8.0.14/logs" includes="**"/>
			<fileset dir="web_container/apache-tomcat-8.0.14/work" includes="**"/>
		</delete>
  </target>

  <!-- deletes the code used to build the schema. --> 
  <target 
    name="clean-schema-code" 
    description="deletes the classes for working with schema">
		<delete dir="build_schema"/>
  </target>

  <!-- deletes the output from code analysis tools. --> 
  <target 
    name="clean-code-analysis" 
    description="deletes the output from code analysis">
		<delete dir="${lint.output.dir}"/>
  </target>


  <!-- deletes the build directory --> 
  <target 
    name="clean-build" 
    description="deletes the build directory">
    <delete dir="${tomcat.webapps.dir}ROOT/WEB-INF/classes" />
  </target>



  <!-- deletes the database schema, and all its data -->
  <target name="clean-schema" depends="compile-schema-code"  
    description="deletes the db schema, and ALL DATA!">
    <java 
      classpath="build_schema/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.xenos.schema.Delete_db_schema" 
      fork="true" >
			<jvmarg value="-D${conn.str.without.db}" />
			<jvmarg value="-D${conn.str.with.db}" />
		</java>
  </target>


  <!-- ################ -->
  <!--   COMPILATION    -->
  <!-- ################ -->
  <!-- compiling the java files into classes into the build directory -->
  <!--================================================================-->

  <!-- builds the Java classes necessary for the functioning of the
  system.  All classes are built and put in the build directory, and
  other Ant targets move these files to their intended destination -->
  <target name="compile" description="compiles all business java files">
    <javac 
      debug="true" 
      debuglevel="lines,vars,source" 
      includeantruntime="false" 
      classpath="
        lib/mysql-connector-java-5.1.33-bin.jar:
        lib/junit-4.12.jar:
        ${tomcat.lib.dir}servlet-api.jar"
      srcdir="src" 
      destdir="${tomcat.webapps.dir}ROOT/WEB-INF/classes">
			<exclude name="com/renomad/xenos/schema/**" />
      <compilerarg value="-Xlint:unchecked" /> <!-- for more warnings -->
    </javac>
  </target>

  <target name="compile-schema-code" description="code for building schema">
    <mkdir dir="build_schema/classes"/>
    <javac 
      debug="true" 
      debuglevel="lines,vars,source" 
      includeantruntime="false" 
      classpath="
        lib/mysql-connector-java-5.1.33-bin.jar:
        lib/junit-4.12.jar:
        ${tomcat.lib.dir}servlet-api.jar"
      srcdir="src" 
      destdir="build_schema/classes">
			<include name="com/renomad/xenos/schema/**" />
      <compilerarg value="-Xlint:unchecked" /> <!-- for more warnings -->
    </javac>
  </target>


  <!-- ################ -->
  <!--      SCHEMA      -->
  <!-- ################ -->
  <!-- This is a program that runs scripts stored in the db_scripts
      directory to put the database into the right form for use with
      this app -->
  <!--====================================================-->

  <!-- 
    build-schema runs the SQL scripts necessary for the 
    database to have the proper schema.
  -->
	<target name="build-schema" 
		depends="compile-schema-code"
    description="builds the db schema.  see comments in build.xml">
    <java 
			failonerror="true" 
      classpath="build_schema/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.xenos.schema.Build_db_schema" 
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
  </target>


  <!-- 
    build-sample-data adds some sample data to the database to make
    testing easier.
  -->
  <target name="build-sample-data" depends="compile-schema-code" 
    description="adds sample data to the database for testing">
    <java 
			classpath="build_schema/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.xenos.schema.Add_sample_data_to_db"
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
  </target>
  
   <!-- 
    build-language-data adds localized text to the database
  -->
  <target name="build-language-data" depends="compile-schema-code" 
    description="adds localized language data">
    <java 
      classpath="build_schema/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.xenos.schema.Add_language_data_to_db"
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
    <echo message="If this succeeded, run 'ant tomcat-restart' or 'ant tomcat-start'"/>
    <echo message="to get this new data in the system" />
    <echo message="Tomcat, on startup, runs a command to load language data into memory."/>
  </target>

   <!-- 
    build-procs adds procedures to the database
  -->
  <target name="build-procs" depends="compile-schema-code" 
    description="adds (or rebuilds if they exist) stored procedures">
    <java 
      classpath="build_schema/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.xenos.schema.Build_procedures"
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
  </target>

   <!-- 
    build-events adds events to the database
  -->
  <target name="build-events" depends="compile-schema-code" 
    description="adds (or rebuilds if they exist) events">
    <java 
      classpath="build_schema/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.xenos.schema.Build_events"
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
  </target>


  <!-- ############## -->
  <!--     JAVADOC    -->
  <!-- ############## -->
	<!-- Scripts for building Javadocs -->
  <!--====================================================-->

	<!-- Creates Javadoc -->
	<target name="docs" 
    description="builds the javadocs">
		<javadoc packagenames="com.renomad.xenos" sourcepath="${src.dir}" destdir="${docs.dir}">
			<!-- Define which files / directory should get included, we include all -->
			<fileset dir="${src.dir}">
				<include name="**" />
			</fileset>
			<classpath>
				<pathelement 
					path="
					build/classes:
					lib/mysql-connector-java-5.1.33-bin.jar:
					lib/junit-4.12.jar:
					lib/hamcrest-core-1.3.jar:
					${tomcat.lib.dir}servlet-api.jar" />
			</classpath>
		</javadoc>
	</target>


  <!-- ############## -->
  <!--     TESTING    -->
  <!-- ############## -->
	<!-- Scripts for testing-->
  <!--====================================================-->

    <!-- Run the JUnit Tests -->
	<target name="test" description="runs the tests">
		<junit printsummary="on" fork="true" haltonfailure="yes">
			<jvmarg value="-DTESTING_DATABASE_CODE_WITHOUT_TOMCAT=true"	/>
			<jvmarg value="-D${conn.str.with.db}"	/>
		<classpath>
			<pathelement 
				path="
				build/classes:
				lib/mysql-connector-java-5.1.33-bin.jar:
				lib/junit-4.12.jar:
				lib/hamcrest-core-1.3.jar:
        ${tomcat.lib.dir}servlet-api.jar " />
		</classpath>
		<formatter type="plain" usefile="false"/>
		<test name="com.renomad.xenos.tests.Requestoffer_tests"/>
	</junit>
    <echo message=""/>
    <echo message="*** Make sure you compiled or rebuilt the schema if neccessary."/>
    <echo message="*** If there were errors, check whether you should rebuild classes or database"/>
    <echo message="*** All this target does is run the tests."/>
    <echo message=""/>
	</target>


  <!-- ####################### -->
  <!--     STATIC ANALYSIS     -->
  <!-- $$$$$$$$$############## -->
  <!-- Scripts for running static code analysis on the codebase -->
  <!--===========================================================-->

  <target name="lint-all" description="runs all the lint programs" >
		<antcall target="findbugs" />
		<antcall target="pmd" />
		<antcall target="lint4j" />
	</target>

	<target name="build-lint-output">
		<mkdir dir="${lint.output.dir}"/>
	</target>

  <target name="findbugs" depends="build-lint-output">
    <taskdef name="findbugs" 
      classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
      <classpath>
        <pathelement location="${tomcat.lib.dir}servlet-api.jar" />
        <pathelement location="${findbugs.dist.dir}/lib/findbugs-ant.jar" />
      </classpath>
    </taskdef>
    <findbugs home="${findbugs.dist.dir}"
              output="html"
              outputFile="${lint.output.dir}/findbugs_output.html" >
      <sourcePath path="./src" />
      <class location="./build/classes" />
    </findbugs>
		<echo message="output from findbugs is in http://localhost:8080/lint/findbugs_output.html" />
  </target>

  <target name="pmd" >
    <path id="pmd.classpath">
      <fileset dir="${tomcat.lib.dir}/" >
        <include name="*.jar" />
      </fileset>
      <fileset dir="${pmd.dist.dir}/lib/">
        <include name="*.jar"/>
      </fileset>
    </path>
    <taskdef 
      name="pmd" 
      classname="net.sourceforge.pmd.ant.PMDTask" 
      classpathref="pmd.classpath">
    </taskdef>
    <pmd shortFilenames="true">
      <sourceLanguage name="java" version="1.6"/>
      <ruleset>rulesets/java/design.xml</ruleset>
      <ruleset>java-basic</ruleset>
      <formatter type="html" toFile="${lint.output.dir}/pmd_report.html">
        <param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
      </formatter>
      <fileset dir="src/">
        <include name="**"/>
      </fileset>
    </pmd>
		<echo message="output from pmd is in http://localhost:8080/lint/pmd_report.html" />
  </target>


  <target name="lint4j" >
    <taskdef 
      name="lint4j" 
      classname="com.jutils.lint4j.ant.Lint4jAntTask"  >
      <classpath>
        <pathelement location="${lint4j.dist.dir}/jars/lint4j.jar" />
      </classpath>
    </taskdef>
		<lint4j 
        level="5" 
        packages="com.renomad.*" 
        exact="false" >
      <sourcepath>
        <dirset dir="${src.dir}">
          <include name="**"/>
        </dirset>
      </sourcepath>
			<classpath>
				<fileset dir="build/classes">
					<include name="**" />
				</fileset>
				<pathelement location="${tomcat.lib.dir}servlet-api.jar" />
			</classpath>
      <formatters>
				<formatter type="text" toFile="${lint.output.dir}/lint4j_output.txt"/>
      </formatters>
		</lint4j>
		<echo message="output from lint4j is in http://localhost:8080/lint/lint4j_output.txt" />
	</target>



  <!-- ############## -->
  <!--     UTILS      -->
  <!-- ############## -->
  <!-- Scripts for helping out with using Ant   -->
  <!--====================================================-->

  <target name="usage"> 
    <echo message="  If this is your first time with the project, read"/> 
    <echo message="  the README file and make sure you have the dependencies."/> 
    <echo message="  Then, to build everything, just run:"/> 
    <echo message="     ant run-dev"/> 
    <echo message=""/> 
    <echo message="  Execute 'ant -p' for build file help."/> 
  </target> 

  <target name="debug" description="see all properties configured">
    <echoproperties/>
  </target>

  <!-- ############## -->
  <!--     TOMCAT     -->
  <!-- ############## -->
  <!-- Scripts for starting, stopping, restarting Tomcat -->
  <!--====================================================-->


  <!-- This target acts as a dependency to tell if Tomcat is running 
      "pidfile" is set in $CATALINA_HOME/bin/setenv.sh, and contains
      the process id of Catalina.-->
  <target name="check-if-tomcat-running" 
	depends="check-unix-tomcat-running, check-windows-tomcat-running">
  </target>

	<!-- Just always return true if we are on windows -->
	<target name="check-windows-tomcat-running" if="isWindows">
		<property name="tomcat.running" value="true" />
	</target>

	<target name="check-unix-tomcat-running" if="isUnix">
		<available 
		  file="web_container/apache-tomcat-8.0.14/temp/pidfile" 
		  property="tomcat.running"
		  value="true" />
	</target>

  <target name="tomcat-restart" description="restart the tomcat server">
      <antcall target="tomcat-stop" />
      <antcall target="tomcat-start" />
  </target>

  <target name="tomcat-start" description="start tomcat">
    <exec executable="${tomcat.home.bin}startup.sh" osfamily="unix" />
    <exec executable="${tomcat.home.bin}startup.bat" osfamily="windows" />
    <echo message=""/>
    <echo message="Installing language data."/>
    <echo message="Xenos is ready at https://localhost:8443"/>
    <echo message="or (non-ssl) at http://localhost:8080"/>
  </target>

  <target name="tomcat-stop" 
    description="stop tomcat"
    depends="check-if-tomcat-running" 
    if="tomcat.running">
    <exec executable="${tomcat.home.bin}shutdown.sh" osfamily="unix" />
    <exec executable="${tomcat.home.bin}shutdown.bat" osfamily="windows" />
  </target>

</project>
