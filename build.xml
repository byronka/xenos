<project name="Qarma" >

  <!-- Note: it is important that this file, build.xml, remain
       at the top of the directory, as it refers to directories
       in relationship to its location -->

  <!-- ################ -->
  <!--    PROPERTIES    -->
  <!-- ################ -->
  <!-- assign values to be used elsewhere in this script -->
  <!--====================================================-->

	<!-- Tomcat -->
  <property name="tomcat.home.bin" 
		value="./web_container/apache-tomcat-8.0.14/bin/" />
  <property name="tomcat.webapps.dir" 
		value="./web_container/apache-tomcat-8.0.14/webapps/" />
  <property name="tomcat.lib.dir" 
		value="./web_container/apache-tomcat-8.0.14/lib/" />

	<!-- Source directory -->
  <property name="src.dir" 
		value="./src" />

	<!-- Javadocs -->
  <property name="docs.dir" 
		value="${tomcat.webapps.dir}/qarma_javadocs" />
  <property name="lint.output.dir" 
		value="${tomcat.webapps.dir}/lint" />

	<!-- Connection strings -->
	<property name="conn.str.with.db"
		value="CONNECTION_STRING_WITH_DB=jdbc:mysql://localhost/test?user=qarmauser&amp;password=password1" />
	<property name="conn.str.without.db"
		value="CONNECTION_STRING_WITHOUT_DB=jdbc:mysql://localhost/?user=qarmauser&amp;password=password1" />

	<!-- static code analysis -->
	<property name="lint4j.dist.dir"
		value="./utils/lint4j-0.9.1" />
	<property name="findbugs.dist.dir"
		value="./utils/findbugs-3.0.0" />
	<property name="pmd.dist.dir"
		value="./utils/pmd-bin-5.2.2" />
	<property name="checkstyle.dist.dir"
		value="./utils/checkstyle" />

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>
	


  <!-- ##################### -->
  <!--    COMBINED TARGETS   -->
  <!-- ##################### -->
  <!-- Targets that combine other targets for ease of use -->
  <!--====================================================-->

  <!-- This target is expected to be run when a new dev first
      gets started.  It sets up a new database, adds some sample
      data to it, then cleans and builds the classes, puts everything
      in its place, and kicks off the server.
  -->
  <target name="run-initial" 
    description="full-cleans (bye-byte data!), makes a new database with sample data, compiles, starts server">
    <antcall target="clean-db-and-classes" />
    <antcall target="build-schema" />
    <antcall target="build-sample-data" />
    <antcall target="run" />
  </target>


  <!-- cleans, builds, installs into container, restarts tomcat -->
  <target name="run" 
    description="cleans, builds, installs, restarts">
    <antcall target="clean-build" />
    <antcall target="compile" />
    <antcall target="install" />
    <antcall target="tomcat-restart" />
    <echo message="Qarma is ready at http://localhost:8080/qarma"/>
  </target>


  <!-- ################ -->
  <!--    CLEANING      -->
  <!-- ################ -->
  <!-- targets that deleted generated files and directories -->
  <!--======================================================-->

	<!-- deletes the compiled java files in the work directory
	and also the entire database.  use with caution! -->
  <target 
    name="clean-db-and-classes" 
    description="deletes database (Bye-bye all data) and build directory">
    <antcall target="clean-schema" />
    <antcall target="clean-build" />
  </target>


	<!-- deletes the compiled java files in the work directory
	and also the entire database.  use with caution! -->
  <target 
    name="clean-everything" 
    description="deletes db, classes, code analysis, javadocs, tomcat logs and work directories">
    <antcall target="clean-schema" />
    <antcall target="clean-build" />
    <antcall target="clean-javadoc" />
    <antcall target="clean-tomcat" />
    <antcall target="clean-code-analysis" />
  </target>

  <!-- deletes the javadoc directory --> 
  <target 
    name="clean-javadoc" 
    description="deletes the javadoc directory">
		<delete dir="${docs.dir}"/>
  </target>

  <!-- deletes the tomcat log and work directory 
    don't worry, they get rebuilt when Tomcat starts. --> 
  <target 
    name="clean-tomcat" 
    description="deletes the tomcat log and work directory">
		<delete>
			<fileset dir="web_container/apache-tomcat-8.0.14/logs" includes="**"/>
			<fileset dir="web_container/apache-tomcat-8.0.14/work" includes="**"/>
		</delete>
  </target>

  <!-- deletes the output from code analysis tools. --> 
  <target 
    name="clean-code-analysis" 
    description="deletes the output from code analysis">
		<delete dir="${lint.output.dir}"/>
  </target>


  <!-- deletes the build directory --> 
  <target 
    name="clean-build" 
    description="deletes the build directory">
    <delete dir="build"/>
  </target>



  <!-- deletes the database schema, and all its data -->
  <target name="clean-schema" 
    depends="compile"
    description="deletes the db schema, and ALL DATA!">
    <java 
      classpath="build/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.qarma.schema.Delete_db_schema" 
      fork="true" >
			<jvmarg value="-D${conn.str.without.db}" />
			<jvmarg value="-D${conn.str.with.db}" />
		</java>
  </target>


  <!-- ################ -->
  <!--   COMPILATION    -->
  <!-- ################ -->
  <!-- compiling the java files into classes into the build directory -->
  <!--================================================================-->

  <!-- builds the Java classes necessary for the functioning of the
  system.  All classes are built and put in the build directory, and
  other Ant targets move these files to their intended destination -->
  <target name="compile" description="compiles all java files">
    <mkdir dir="build/classes"/>
    <javac 
      debug="true" 
      debuglevel="lines,vars,source" 
      includeantruntime="false" 
      classpath="
        lib/mysql-connector-java-5.1.33-bin.jar:
        lib/junit-4.12.jar:
        ${tomcat.lib.dir}servlet-api.jar"
      srcdir="src" 
      destdir="build/classes">
      <compilerarg value="-Xlint:unchecked" /> <!-- for more warnings -->
    </javac>
  </target>


  <!-- 
    copies the compiled classes and other resources into
    their proper locations in the web_container directory.
  -->
  <target name="install"
    description="move files into web container">
    <copy todir="${tomcat.webapps.dir}qarma/WEB-INF/classes" >
      <!-- Note: **/* will include all sub-directories. -->
      <fileset dir="build/classes" includes="**/*" />
    </copy>
  </target>



  <!-- ################ -->
  <!--      SCHEMA      -->
  <!-- ################ -->
  <!-- This is a program that runs scripts stored in the db_scripts
      directory to put the database into the right form for use with
      this app -->
  <!--====================================================-->

  <!-- 
    build-schema runs the SQL scripts necessary for the 
    database to have the proper schema.
  -->
  <target name="build-schema" 
    depends="compile" 
    description="builds the db schema.  see comments in build.xml">
    <java 
      classpath="build/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.qarma.schema.Build_db_schema" 
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
  </target>


  <!-- 
    build-sample-data adds some sample data to the database to make
    testing easier.
  -->
  <target name="build-sample-data" 
    depends="compile, clean-schema, build-schema" 
    description="adds sample data to the database for testing">
    <java 
      classpath="build/classes:lib/mysql-connector-java-5.1.33-bin.jar"
      classname="com.renomad.qarma.schema.Add_sample_data_to_db"
      fork="true" >
			<jvmarg value="-D${conn.str.with.db}" />
			<jvmarg value="-D${conn.str.without.db}" />
		</java>
  </target>


  <!-- ############## -->
  <!--     JAVADOC    -->
  <!-- ############## -->
	<!-- Scripts for building Javadocs -->
  <!--====================================================-->

	<!-- Creates Javadoc -->
	<target name="docs" depends="compile"
    description="builds the javadocs">
		<javadoc packagenames="com.renomad.qarma" sourcepath="${src.dir}" destdir="${docs.dir}">
			<!-- Define which files / directory should get included, we include all -->
			<fileset dir="${src.dir}">
				<include name="**" />
			</fileset>
			<classpath>
				<pathelement 
					path="
					build/classes:
					lib/mysql-connector-java-5.1.33-bin.jar:
					lib/junit-4.12.jar:
					lib/hamcrest-core-1.3.jar:
					${tomcat.lib.dir}servlet-api.jar" />
			</classpath>
		</javadoc>
	</target>


  <!-- ############## -->
  <!--     TESTING    -->
  <!-- ############## -->
	<!-- Scripts for testing-->
  <!--====================================================-->

    <!-- Run the JUnit Tests -->
	<target name="test" depends="compile"
    description="runs the tests">
    <antcall target="clean-db-and-classes" />
    <antcall target="build-schema" />
    <antcall target="build-sample-data" />
		<junit printsummary="on" fork="true" haltonfailure="yes">
			<jvmarg value="-DTESTING_DATABASE_CODE_WITHOUT_TOMCAT=true"	/>
			<jvmarg value="-D${conn.str.with.db}"	/>
		<classpath>
			<pathelement 
				path="
				build/classes:
				lib/mysql-connector-java-5.1.33-bin.jar:
				lib/junit-4.12.jar:
				lib/hamcrest-core-1.3.jar:
				${tomcat.lib.dir}servlet-api.jar" />
		</classpath>
		<formatter type="plain" usefile="false"/>
		<test name="com.renomad.qarma.tests.Request_tests"/>
	</junit>
	</target>


  <!-- ####################### -->
  <!--     STATIC ANALYSIS     -->
  <!-- $$$$$$$$$############## -->
  <!-- Scripts for running static code analysis on the codebase -->
  <!--===========================================================-->

  <target name="lint-all" depends="findbugs, pmd, lint4j"
    description="runs all the lint programs" />

	<target name="build-lint-output">
		<mkdir dir="${lint.output.dir}"/>
	</target>

  <target name="findbugs" depends="compile, build-lint-output">
    <taskdef name="findbugs" 
      classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
      <classpath>
        <pathelement location="${tomcat.lib.dir}servlet-api.jar" />
        <pathelement location="${findbugs.dist.dir}/lib/findbugs-ant.jar" />
      </classpath>
    </taskdef>
    <findbugs home="${findbugs.dist.dir}"
              output="html"
              outputFile="${lint.output.dir}/findbugs_output.html" >
      <sourcePath path="./src" />
      <class location="./build/classes" />
    </findbugs>
		<echo message="output from findbugs is in http://localhost:8080/lint/findbugs_output.html" />
  </target>

  <target name="pmd" depends="compile,build-lint-output">
    <path id="pmd.classpath">
      <fileset dir="${tomcat.lib.dir}/" >
        <include name="*.jar" />
      </fileset>
      <fileset dir="${pmd.dist.dir}/lib/">
        <include name="*.jar"/>
      </fileset>
    </path>
    <taskdef 
      name="pmd" 
      classname="net.sourceforge.pmd.ant.PMDTask" 
      classpathref="pmd.classpath">
    </taskdef>
    <pmd shortFilenames="true">
      <sourceLanguage name="java" version="1.6"/>
      <ruleset>rulesets/java/design.xml</ruleset>
      <ruleset>java-basic</ruleset>
      <formatter type="html" toFile="${lint.output.dir}/pmd_report.html">
        <param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
      </formatter>
      <fileset dir="src/">
        <include name="**"/>
      </fileset>
    </pmd>
		<echo message="output from pmd is in http://localhost:8080/lint/pmd_report.html" />
  </target>


  <target name="lint4j" depends="compile,build-lint-output">
    <taskdef 
      name="lint4j" 
      classname="com.jutils.lint4j.ant.Lint4jAntTask"  >
      <classpath>
        <pathelement location="${lint4j.dist.dir}/jars/lint4j.jar" />
      </classpath>
    </taskdef>
		<lint4j 
        level="5" 
        packages="com.renomad.*" 
        exact="false" >
      <sourcepath>
        <dirset dir="${src.dir}">
          <include name="**"/>
        </dirset>
      </sourcepath>
			<classpath>
				<fileset dir="build/classes">
					<include name="**" />
				</fileset>
				<pathelement location="${tomcat.lib.dir}servlet-api.jar" />
			</classpath>
      <formatters>
				<formatter type="text" toFile="${lint.output.dir}/lint4j_output.txt"/>
      </formatters>
		</lint4j>
		<echo message="output from lint4j is in http://localhost:8080/lint/lint4j_output.txt" />
	</target>



  <!-- ############## -->
  <!--     TOMCAT     -->
  <!-- ############## -->
  <!-- Scripts for starting, stopping, restarting Tomcat -->
  <!--====================================================-->


  <!-- This target acts as a dependency to tell if Tomcat is running 
      "pidfile" is set in $CATALINA_HOME/bin/setenv.sh, and contains
      the process id of Catalina.-->
  <target name="check-if-tomcat-running" 
	depends="check-unix-tomcat-running, check-windows-tomcat-running">
  </target>

	<!-- Just always return true if we are on windows -->
	<target name="check-windows-tomcat-running" if="isWindows">
		<property name="tomcat.running" value="true" />
	</target>

	<target name="check-unix-tomcat-running" if="isUnix">
		<available 
		  file="web_container/apache-tomcat-8.0.14/temp/pidfile" 
		  property="tomcat.running"
		  value="true" />
	</target>

  <target name="tomcat-restart" description="restart the tomcat server">
      <antcall target="tomcat-stop" />
      <antcall target="tomcat-start" />
  </target>

  <target name="tomcat-start" description="start tomcat">
    <exec executable="${tomcat.home.bin}startup.sh" osfamily="unix" />
    <exec executable="${tomcat.home.bin}startup.bat" osfamily="windows" />
  </target>

  <target name="tomcat-stop" 
    description="stop tomcat"
    depends="check-if-tomcat-running" 
    if="tomcat.running">
    <exec executable="${tomcat.home.bin}shutdown.sh" osfamily="unix" />
    <exec executable="${tomcat.home.bin}shutdown.bat" osfamily="windows" />
  </target>

</project>
