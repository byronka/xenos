Much of the development material attempts to be self-documenting.
However, a little extra time spent explaining things can help ease the
transition into a new project.  That is what this document is for.

Contents:
=========
Program features
Backups
Programming suggestions
General conventions
Utilities
Setting up Eclipse as a IDE for Xenos
Localization
Safe Rendering of Client-provided values
Viewing the database values
Running Tomcat in SSL
SQL standards
Git branches
Git events
Git commit standards
Version number
Database history
Useful SQL scripts
Testing
Definitions
Deploy checklist
Troubleshooting





Program features
================
These are some of the features provided by the system:
Language localization - shows different languages depending on user locale
Highly performant
logs users out after a timeout of 30 minutes 
All users' passwords are encrypted
cookies are encrypted




Backups
=======
Every time a commit is pushed to the main repo, it automatically
pushes a separate commit to the backup machine.  By itself this
constitutes a backup.  Separately, however, there is a script that
copies the information from there to a third location and then stores
that onto an SD card monthly.

Furthermore, both SecretServer and YouTrack are backed up monthly, the
first of the month, by a script on Byron's computer, to an SD card.

Both SecretServer and YouTrack have multiple backups on their server,
but in case of a hard drive failure or other similar machine failure,
there will still be a backup.




Programming suggestions
=======================

The overarching technique employed in the construction thus far has
been simplicity.  

We have avoided the use of frameworks, abstractions, and patterns
wherever possible.  Some of the conventions that have organically
developed thus far:
* All business logic happens server-side.
* Niceties for UI may be implemented in JavaScript, but code must be
  engineered to work without needing it.  For example, the code for
  setting categories on a requestoffer.  That code will show the categories
  and will allow the user to type them in, if JavaScript is not
  available.  If it is available, JavaScript can modify the page to hide
  the list of categories and display a prettier interface, but in the
  end, the text goes into the same input field and gets posted as though
  the user had manually input it.
* Validation code happens in the JSP file.  
* Consider that the bulk of time is not spent writing the code, but in
  debugging it.  That being the case, avoid dynamic, run-time coding
  techniques, instead favoring stodgy, boring old strongly-typed
  non-generic stuff.
* Write code in such a way that stacktraces are informative.  A
  stacktrace that does not immediately lead to the actual error is a
  defect and should be corrected as such.
* Test cases may be used to help work out a tricky problem. But in no
  case should confounding, opaque test cases ever be written.  If a
  developer cannot look at the test case and immediately understand
  what it's trying to test or do, that's a defect and should be
  corrected.








General conventions
==================

We do not allow warnings to propagate in our system.  If something is
throwing a warning, you correct it.  We believe in the theory of
broken windows and don't let sloppiness creep into our system.  It's a
constant fight against entropy.

Likewise, if you see error or warning messages in the logs, you
correct that.  It's not ok to allow those to continue just because the
system seems to be working.  We want a very high signal to noise
ratio.

If you put a "TODO" into the codebase, expect to have it resolved
within a month tops, preferably a day.  We will need refactoring days
and stories to resolve those so they don't accumulate.










Utilities
=========

Exuberant Ctags -
-----------------

use of the program "exuberant ctags" can make navigation of the code
base faster.  That program creates an index of symbols used in the code;
method names, variables, classes, and so on.  It provides this to Vim
and Emacs for quick navigation.  In Vim, you can press ctrl+[ to visit
the definition of a given method, and ctrl+T to return.

To create this index, run the program
  $XENOS_HOME/utils/run_ctags.sh

This will create a file called "tags" in your $XENOS_HOME directory,
which will be around 25 megabytes or larger.

Using that file with Vim requires Vim to know about it.  You can do
this by adding the following to your vimrc file:

:set tags=./tags;~/Projects

(add this to your .vimrc). This makes Vim look for a file named tags
first in its current directory, then in its parent directory, and so
on recursively up to containing directory ~/Projects.)


Lint4J - 
-----------------

A lint program that does static analysis on the code to find any problems.
http://www.jutils.com


PMD - 
------

A static code analysis program.  Very thorough, but many false
positives.  In particular, it is coded with the assumption that OOP is
the one true path.  In contrast, OOP should be considered one possible
solution to problems, not the only solution.  Again, lots of false
positives.
http://pmd.sourceforge.net/


FindBugs -
----------

A static code analysis program.
http://findbugs.sourceforge.net/

You can run all three of these by running
	ant all-lint

the output will be found at http://localhost:8080/lint/










Setting up Eclipse as a IDE for Xenos
=====================================

Base Project - 
* Start Eclipse
* Press Ctrl+N (if you changed your keybindings, go to File -> New -> Other
* Click on "Java Project from Existing Ant Buildfile" and click Next
* Click on Browse and search for the build.xml at the top of the Xenos
  directory
* The pane below should be filled with '<> "javac" task found in
  target "compile"'
* Don't check "link to the buildfile in the file system" as this will
  cause any build changes in Eclipse to be written to build.xml.
  However, if you want to experiment or you know what you're doing, feel
  free.  The anticipated convention in building is to use the IDE for
  help with writing the code, but use the command line to build.  *
  continue through and you will have a new Xenos project in Eclipse.
* Congrats!

db scripts and JSP files - 
1) right click on the newly created Xenos project and select from the
  context menu: New -> Other
* Under general, select "Folder" and click next.
* Select Xenos as the parent directory
* Click the Advanced button
* Click the "Link to alternate location (Linked Folder)" radio button
* Click Browse.
* Find the db_scripts directory, where the SQL scripts are held.
* Continue through, and you'll have db_scripts as a folder in your project.
* Repeat from step 1 to add the directory for the web files, which is in
  $CATALINA_HOME/webapps/xenos

You should now have access to all the files needed for Xenos development in
Eclipse.  Unless you have a strong reason for doing so, use the ant
commands for major functionalities, e.g. building, cleaning, etc.












Localization
============

The localization mechanism is fairly simple.  All the words that come
from Xenos system, that is, the non-user-editable words, need to exist
for multiple languages.  That way we can roll this out across the
world.  

To do that, there exists a very minimalistic localization tool.  

When Tomcat first starts up the app, it pulls from the database all
the values in the localization_lookup table. This contains words and
phrases in English, along with translations in other languages.  It
stores all those values into a static value that remains in memory.  

Succinctly, all the localization values sit, unchanging, in memory.
Whenever a page needs values, it runs the command Localization.get(),
along with the index of the value it needs and the phrase it needs
localized.  

To add a new language: add a new row to the languages table, with the
id of the language as used in localization_lookup, and the string to
look for in the locale string sent by the client.  Then just add a row
of data for every word/phrase in that language into localization_lookup.












Safe Rendering of Client-provided values
========================================

One of the problems web apps have is that users will occasionally
enter html values for input.  Sometimes this is by accident, sometimes
malicious.  Either way, it is crucial that we not allow the browser to
see that text as valid html markup.  If it were to do so, then a user
could enter their name as something like <script>alert(1)</script> and
when the server sent that to the browser, it would parse that and run
the code inside.  (Yuck!).  So to prevent that problem, we "clean" the
text.  That is, all the greater-than and less-than symbols ,> or <, we
convert to &gt; and &lt;

The browser knows how to render that, and we are safe.  However, as
time goes on we must be constantly vigilant to not allow any unaltered
text through.












Viewing the database values
===========================

Xenos stores its values in a schema named xenos_database.  There are a
variety of tables, they are mostly self-explanatory, but more clues can
often be found by reviewing the scripts in db_scripts/











Running Tomcat in SSL
=====================

Tomcat is set to work on SSL, following the instructions at:

http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html#Configuration

There is a copy of that file in this directory, at ssl-howto-tomcat.txt














SQL standards
===============

1) Try to avoid ever using triggers.  Triggers are events, events make
  it difficult or impossible to debug.
2) Describe what your SQL is meant to do, and why.
3) Try to simplify your SQL code.
4) A great way to debug work while you are writing it is to include a
	select statement indicating the query.  For example,
  if you are writing a stored procedure, include near the end a SELECT
  @query to print out the resulting SQL so you can understand what the
  database is thinking.
5) Great reasons to use stored procedures: if you are doing something
  that requires multiple conversations with the database, that might
  be a good time to use stored procedures.  For example, you want to
  delete a requestoffer.  So first, check that the requestoffer exists,
  then delete the requestoffer, then add an audit.  If you do that in
  code, there is a lot of boiler plate required to tie things together -
  checking for errors, rolling back if necessary, etc. Whereas, if you
  do it in a stored procedure, all that boiler plate disappears.
6) Adding sample data: there needs to be sample data for every table
  in the system that receives user data (not enum tables like
  audit_actions).  Not having sample data is a defect.  Reason being,
  that it provides us with a way of keeping tight control on the system
  state when we run the "build-sample-data" script.














Git branches
============

The convention we want to follow here is to create a branch if the
feature is going to require multiple commits to finish.  If it's a
tiny thing (one commit) you can just add that to the master branch
directly.  Use the following convention for the branch names:

  initials/branchName

for example:

  bk/Adding_documentation




















Git events
==========

When you commit in Git, you are committing to your local repo - only
your local system.  When you 'push', you send your local repo to the
main repo, on prime.renomad.com on the 'git' account.  In turn, that
account sends out an email to interested parties about the push, and
then sends to a backup account on git@ssh.renomad.com, which in turn
gets backed-up to a sd card once a month.
















Git commit standards
====================

When you make a commit, it's important to know what task it relates
to.  There is a hook which requires syntax similar to the following:

BK-#123- here is the message blah blah blah

the syntax is: two to three initials (uppercase), a dash, a hash
symbol, from 1 to 7 digits, a dash, and then whatever you want.

The number should be the same as the issue number in YouTrack.
However, if you are committing something not tracked in YouTrack, use
0 as the number.

The scripts necessary to enforce this on the client side are located
in the git_scripts folder, in the same folder as this document.  Move
those scripts into $XENOS_HOME/.git/hooks/ by doing this:

cp $XENOS_HOME/docs/git_scripts/* $XENOS_HOME/.git/hooks/

and then make those scripts runnable:

chmod u+x $XENOS_HOME/.git/hooks/*














Version number
==============

The version number of Xenos is configured in the database in the
config table.  There is a stored procedure, "set_version", which takes
an integer and sets the value to the table.  This version number is
only to be incremented upon a release.




Database history
================
Database in use:
Beginning up to current: 5.6.23 will work
Beginning up to eef04ec139930f055f234c4faadbe4a0db1222ca - 5.5 and up works
eef04ec139930f055f234c4faadbe4a0db1222ca and beyond 5.6.23 exactly
f6b5c612f6bb6d6ec7817896e7555a33fb12d454 and beyond 10.0.17-MariaDB 





Useful SQL scripts
==================
Show the audit with messages and usernames and notes:

CALL show_audit_log_info(); -- shows lots of useful audit info










Testing
=======

To create test scripts for integrated testing using Lynx, you can use
a command like the following:

lynx -cmd_log=FILENAME http://localhost:8080/xenos

and to run that script, type:

lynx -cmd_script=FILENAME http://localhost:8080/xenos

Awesomely, it will record every keystroke, including those for saying,
"Yes, I would like to always accept cookies" and things like quitting
Lynx.  In other words, EVERY keystroke.

The major benefit of these integration tests is they move freakishly
fast, can go through any use case you can imagine in the system, and
then you can look through logs to see anything that went wrong and fix
it.  Great for running before a commit.

Consider whether the script is the kind that should quit when it's done,
or should not.  These scripts are not entirely intended to run without
supervision - they are a way of quickly smoke testing the product, and
having human supervision is accepable for some of the broad use cases.
You may want to have the script finish on some page for human review.

Things to test - 

registering a user
  validation when lacking username
  validation when lacking password
  validation when username exists
  validation when username is the same as an existing email
  
login
  login succeeds on valid user
  login fails on invalid user
  login fails with bad credentials for valid user
  login fails with empty username, validation occurs
  login fails with empty password, validation occurs
  login fails with both empty username and password, validation occurs

creating a requestoffer
  with / without location
  validation when lacking category
  publish the requestoffer
  
delete a draft requestoffer
delete an open non-taken requestoffer

cancel a taken requestoffer
  as handler / as owner
  
change password
  success when valid old password and a new password exists
  fail when bad old password
  fail when lacking old password
  fail when lacking new password
  fail when lacking old and new password

messaging
	when user offers to handle your requestoffer, message should appear shortly
	for you
    on dashboard
    on requestoffer
    on create_requestoffer
    on my_profile
  similarly, you should receive a message about 
    user accepting your offer to handle your requestoffer
    user cancelling their action with your requestoffer
    owner completing the requestoffer
  
timeout
  timeout should appear after 25 minutes of idle and log you out at the 30 minute mark
  clicking "I'm not done" should reset that time
  timeout should appear localized






Definitions
===============
Requestoffer - this thing can be a favor, a purchase, a request, an offer, etc.











Deploy checklist
===============
Test these features:
  create requestoffer
  delete requestoffer
  handle a requestoffer
  search for requestoffers

check that audits appeared for those actions
check that no stacktraces appeared in logs

smoke test the application in Hebrew and French
smoke test it on Chrome, Firefox, and Iphone, Android

** There can be no known defects at release. **






Troubleshooting
===============

1) If you see this kind of text on your screen, it means localization
is failing somehow:

out_of_index: 18

2) You may occasionally see vague errors when hitting pages.  This is
sometimes caused by stale data.  Tomcat processes all JSP files into class
files and stores them in its work directory.  If these files are
out-of-date, then you might see weirdness like this.  In that case, remove
all the work files.  You may do this by running ant clean-everything
