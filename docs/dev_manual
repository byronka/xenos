Much of the development material attempts to be self-documenting.
However, a little extra time spent explaining things can help ease the
transition into a new project.  That is what this document is for.

Contents:
=========
Programming suggestions
Utilities
Setting up Eclipse as a IDE for Qarma





Programming suggestions
=======================

The overarching technique employed in the construction thus far has
been simplicity.  

I have avoided the use of frameworks, abstractions, and patterns
wherever possible.  Some of the conventions that have organically
developed thus far:
* All business logic happens server-side.
* Niceties for ui may be implemented in JavaScript, but code must be
  engineered to work without needing it.  For example, the code for
  setting categories on a request.  That code will show the categories
  and will allow the user to type them in, if JavaScript is not
  available.  If it is available, JavaScript can modify the page to hide
  the list of categories and display a prettier interface, but in the
  end, the text goes into the same input field and gets posted as though
  the user had manually input it.
* Validation code happens in the JSP file.  





Utilities
=========

Exuberant Ctags -
-----------------
use of the program "exuberant ctags" can make navigation of the code
base faster.  That program creates an index of symbols used in the code;
method names, variables, classes, and so on.  It provides this to Vim
and Emacs for quick navigation.  In Vim, you can press ctrl+[ to visit
the definition of a given method, and ctrl+T to return.

To create this index, run the program
  $QARMA_HOME/utils/run_ctags.sh

This will create a file called "tags" in your $QARMA_HOME directory,
which will be around 25 megabytes or larger.

Using that file with Vim requires Vim to know about it.  You can do
this by adding the following to your vimrc file:

:set tags=./tags;~/Projects

(add this to your .vimrc). This makes Vim look for a file named tags
first in its current directory, then in its parent directory, and so
on recursively up to containing directory ~/Projects.)

Lint4J - 
-----------------
A lint program that does static analysis on the code to find any problems.
http://www.jutils.com

PMD - 
------
A static code analysis program.  Very thorough, but many false
positives.  In particular, it is coded with the assumption that OOP is
the one true path.  In contrast, OOP should be considered one possible
solution to problems, not the only solution.  Again, lots of false
positives.
http://pmd.sourceforge.net/

FindBugs -
----------
A static code analysis program.
http://findbugs.sourceforge.net/

You can run all three of these by running
	ant all-lint

the output will be found at http://localhost:8080/lint/



Setting up Eclipse as a IDE for Qarma
=====================================

Base Project - 
* Start Eclipse
* Press Ctrl+N (if you changed your keybindings, go to File -> New -> Other
* Click on "Java Project from Existing Ant Buildfile" and click Next
* Click on Browse and search for the build.xml at the top of the Qarma directory
* The pane below should be filled with '<> "javac" task found in target "compile"'
* Don't check "link to the buildfile in the file system" as this will cause any build changes in Eclipse to be written to build.xml.  However, if you want to experiment or you know what you're doing, feel free.  The anticipated convention in building is to use the IDE for help with writing the code, but use the command line to build.
* continue through and you will have a new Qarma project in Eclipse.  Congrats!

db scripts and JSP files - 
1) right click on the newly created Qarma project and select from the context menu: New -> Other
* Under general, select "Folder" and click next.
* Select Qarma as the parent directory
* Click the Advanced button
* Click the "Link to alternate location (Linked Folder)" radio button
* Click Browse.
* Find the db_scripts directory, where the SQL scripts are held.
* Continue through, and you'll have db_scripts as a folder in your project.
* Repeat from step 1 to add the directory for the web files, which is in $CATALINA_HOME/webapps/qarma

You should now have access to all the files needed for Qarma development in Eclipse.  Unless you have a strong reason for doing so, use the ant commands for major functionalities, e.g. building, cleaning, etc.



